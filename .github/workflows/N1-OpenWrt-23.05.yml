name: N1-OpenWrt-23.05

on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - N1-OpenWrt-23.05

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Show system
      run: |
        echo -e "üí¨ Server information \n"
        echo -e "üíª Server running on Ubuntu: [ Release: $(cat /etc/os-release | grep VERSION_CODENAME | cut -d '=' -f2) / Host: $(arch) ] \n"
        echo -e "üßÆ Server CPU configuration information: \n$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "üíæ Server memory usage: \n$(free -h) \n"
        echo -e "üóÉÔ∏è Server space usag: \n$(df -hT ${GITHUB_WORKSPACE}) \n"

    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q) 2>/dev/null
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo -E apt-get -y update
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        pip3 install --user -U pylibfdt
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo rm -rf ~/{.cargo,.dotnet,.rustup}
        sudo timedatectl set-timezone "${TZ}"
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Create simulated physical disk
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner.runner /builder
        df -Th

    - name: Prepare source code
      working-directory: /builder
      run: |
        echo "build_date=$(date +%Y.%m.%d)" >> ${GITHUB_ENV}
        cp -r ${GITHUB_WORKSPACE}/. ./
        cp -r ./scripts/openwrt-23.05/. ./
        /bin/bash 01_prepare_source_code.sh
        ln -sf /builder/openwrt ${GITHUB_WORKSPACE}/openwrt

    - name: Update & install feeds
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Prepare package
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        cp -r ../scripts/openwrt-23.05/. ./
        /bin/bash 02_prepare_package.sh
        /bin/bash 02_remove_upx.sh

    - name: Convert Translation
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        /bin/bash 03_convert_translation.sh

    - name: Demote Iptables
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        /bin/bash 04_demote_iptables.sh

    - name: Add ACL
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        /bin/bash 05_create_acl_for_luci.sh -a

    - name: Load custom configuration
      run: |
        latest_release="$(curl -s https://github.com/openwrt/openwrt/tags | grep -Eo "v[0-9\.]+-*r*c*[0-9]*.tar.gz" | sed -n '/23.05/p' | sed -n 1p | sed 's/.tar.gz//g' | sed 's/v//g')"
        sed -i -e "s,DATE,${{ env.build_date }}," -e "s,WRT_SOUR,OpenWrt," -e "s,RELEASES,${latest_release}," ./openwrt/files/etc/banner
        echo "latest_release=${latest_release}" >> ${GITHUB_ENV}

    - name: Make config
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        cp -f ../config/openwrt-23.05/.config .config
        touch ./target/linux/*/Makefile
        make defconfig

    - name: Download package
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      working-directory: ${{ github.workspace }}/openwrt
      id: compileopenwrt
      continue-on-error: true
      run: |
        make -j$(($(nproc) + 1))

    - name: If error
      if: steps.compileopenwrt.outcome == 'failure'
      run: |
         make -j1 V=s

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_rootfs_${{ env.build_date }}
        path: openwrt/bin

    - name: Organize files
      run: |
        rm -rf ./artifact/
        mkdir -p ./artifact/
        mv openwrt/bin/targets/armsr/armv8/*rootfs.tar.gz* ./artifact/
        cd ./artifact/
        gzip -d *.gz && exit 0
        gzip --best *.img
        zip N1-LEDE-${{ env.distrib_revision }}-${{ env.build_date }}-ext4.zip *n1*ext4*
        zip N1-LEDE-${{ env.distrib_revision }}-${{ env.build_date }}-sfs.zip *n1*squashfs*

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: ${{ env.build_date }}
        allowUpdates: true
        replacesArtifacts: true
        artifacts: ./artifact/*.zip

    - name: telegram notification
      if: github.event_name == 'repository_dispatch'
      run: |
        firmware_num="$(curl -fsSL https://github.com/ffuqiangg/build_openwrt/releases/expanded_assets/${{ env.build_date }} | grep -oE "N1-.*.zip" | sort -u | wc -l)"
        MSG="
        *${{ env.build_date }}* Âõ∫‰ª∂ÁºñËØëÂÆåÊàê
        https://github.com/ffuqiangg/build\_openwrt/releases/tag/${{ env.build_date }}
        "
        if [[ "${firmware_num}" == 4 ]]; then
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}&parse_mode=MarkDown&disable_web_page_preview=true"
        fi
